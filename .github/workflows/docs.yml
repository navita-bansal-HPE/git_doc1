name: CI on Merge

on:
  push:
    branches:
      - main

env:
  APP_NAME: private-cloud-cafe
  version: "2.${GITHUB_RUN_NUMBER}.0"
  JFROG_USERNAME: ${{ secrets.CCS_JFROG_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.CCS_JFROG_PASSWORD }}
  gh_token: ${{ secrets.GLCP_GH_TOKEN }}

jobs:

  Git_Tag:
    runs-on: ubuntu-latest
    name: Create and update new git tag test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Git Tag
        uses: glcp/ccs-automation/ci_cd_commons/tag_git_new@v3
        id: new-tag
        with:
          version: ${{ env.version }}

    outputs:
      tag: ${{ steps.new-tag.outputs.gittag }}

  BUILD_PUBLISH:
    needs: Git_Tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: bash
        run: |
          cat /etc/os-release
          sudo apt-get update
          sudo apt-get -y dist-upgrade
          sudo apt-get install --no-install-recommends --no-install-suggests -y curl libpq-dev build-essential python3 python3-dev python3-pip python3-setuptools python3-venv
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip
          pip install poetry

      - name: Build
        id: build
        shell: bash
        run: |
          export version=${{ needs.Git_Tag.outputs.tag }}
          source .venv/bin/activate
          ./build.sh

      - name: Publish
        id: publish
        shell: bash
        run: |
          export version=${{ needs.Git_Tag.outputs.tag }}
          source .venv/bin/activate
          ./publish.sh

    outputs:
       tag: ${{ needs.Git_Tag.outputs.tag }}

  DEPLOY_DOCS:
    needs: BUILD_PUBLISH
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme sphinx-autoapi

      - name: Generate .rst files
        run: |
          sphinx-apidoc -o docs/source/ automation_libs/

      - name: Build Sphinx Docs
        run: |
          make -C docs clean
          make -C docs html

      - name: Deploy to GitHub Pages
        run: |
          cd docs/build/html
          touch .nojekyll
          git init
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Deploy updated docs"
          
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          git push --force origin HEAD:gh-pages
